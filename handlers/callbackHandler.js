// handlers/callbackHandler.js

const {
  sendMainMenu
} = require('../utils/ui');
const {
  showCategoryKeyboard,
  showServiceRegionKeyboard,
  showLawyersPage,
  showSellType,
  showProductsType,
  showPartsFresh,
  showBrandsPage,
  showServicesPage,
  showHowSell,
} = require('../utils/menus');
const {
  findModel,
  findService,
  findSellCars,
  findLawyer,
  findProductByType,
} = require('../services/searchService');
const {
  getSellerChatId,
  sendMessageToSeller,
  getAndreyChatId
} = require('../services/senderService');
const fs = require('fs');

async function showSellerInfo(bot, chatId, query, state) {
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
  let usernameInfo = '';
  if (query.from.username) {
    usernameInfo = ` (USERNAME: @${query.from.username})`;
  }

  const sellerMessage = `
  üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –∞–≤—Ç–æ!
  –í–∏–¥ –¢–°: ${state.sellTCType}
  –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: ${state.sellHow}
  –ö–ª–∏–µ–Ω—Ç: ${query.from.first_name}${usernameInfo}
  `;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–æ–º
    const sellerData = getAndreyChatId(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [ { tgId: 1024842449 } ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–ª—É—á–µ–Ω—ã
    if (!sellerData || sellerData.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    const firstSeller = sellerData[0];

    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const sellerTgId = firstSeller.tgId; // 1024842449 (—É–∂–µ —á–∏—Å–ª–æ)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    const isSent = await sendMessageToSeller(bot, sellerTgId, sellerMessage);

    if (isSent) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —á–∞—Ç"
      const chatUrl = `tg://resolve?domain=${encodeURIComponent(firstSeller.username)}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatUsername, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const chatKeyboard = {
        inline_keyboard: [
          [{
            text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
            url: chatUrl
          }],
          [{
            text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data: "main_menu"
          }]
        ]
      };

      // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const clientMessage = `
üöò –û—Å—Ç–∞–≤—Ç–µ –∑–∞—è–≤–∫—É, –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–µ–¥–µ–º –Ω–∞ –æ—Å–º–æ—Ç—Ä.
–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+79134363667">+79134363667</a>.
`;

      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, clientMessage, {
        parse_mode: 'HTML',
        reply_markup: chatKeyboard
      });

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
      const contactKeyboard = {
        reply_markup: {
          keyboard: [
            [{
              text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
              request_contact: true
            }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };

      // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!", contactKeyboard);

      // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const contactHandler = async (msg) => {
        if (msg.contact) {
          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          bot.removeListener('message', contactHandler);

          if (!sellerData.length) throw new Error('–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');

          const sellerMessage = `
üì± –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
–ò–º—è: ${msg.from.first_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${msg.contact.phone_number}
`;

          await sendMessageToSeller(bot, sellerData[0].tgId, sellerMessage);
          await bot.sendMessage(chatId, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!");
        }
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      bot.on('message', contactHandler);
    } else {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{
              text: "–ù–∞–∑–∞–¥",
              callback_data: "sell_command"
            }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function registerCallbackHandler(bot, state) {
  bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const [action, ...params] = data.split('_');

    // Initialize state if it doesn't exist
    if (!state[chatId]) {
      state[chatId] = {};
    }

    try {
      await bot.deleteMessage(chatId, query.message.message_id);
    } catch (error) {
      // ignore
    }

    switch (action) {
      case 'find':
        state[chatId].currentPage = 0;
        showCategoryKeyboard(bot, chatId);
        break;
      case 'command':
        if (params[0] === 'service') {
          showServiceRegionKeyboard(bot, chatId);
        } else if (params[0] === 'lawyer') {
          state[chatId].currentLawyersPage = 0;
          showLawyersPage(bot, chatId, 0);
        }
        break;
      case 'page':
        const page = parseInt(params[0]);
        state[chatId].currentPage = page;
        showBrandsPage(bot, chatId, page);
        break;
      case 'servicepage':
        const servicePage = parseInt(params[0]);
        state[chatId].currentServicePage = servicePage;
        showServicesPage(bot, chatId, servicePage);
        break;
      case 'lawyerpage':
        const lawyerPage = parseInt(params[0]);
        state[chatId].currentLawyersPage = lawyerPage;
        showLawyersPage(bot, chatId, lawyerPage);
        break;
      case 'category':
        state[chatId].selectedCarCategory = parseInt(params[0]);
        showPartsFresh(bot, chatId);
        break;
      case 'fresh':
        state[chatId].selectedFresh = parseInt(params[0]);
        state[chatId].currentPage = 0;
        showBrandsPage(bot, chatId, 0);
        break;
      case 'brand':
        const brand = params[0];
        const paidResults = findModel(brand, state[chatId].selectedCarCategory, state[chatId].selectedFresh, true);
        const otherResults = findModel(brand, state[chatId].selectedCarCategory, state[chatId].selectedFresh, false);

        if (paidResults && paidResults.length > 0) {
          for (const part of paidResults) {
            const phones = part.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            const clientMessageText = `
              üîß ${part.name}
              üìç –ê–¥—Ä–µ—Å: ${part.address}
              üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}

              ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
            `;

            if (part.chatUsername && part.chatUsername.trim() !== '') {
              const sellerTgId = parseInt(getSellerChatId(part.chatUsername)[0].tgId);
              if (sellerTgId) {
                const sellerMessage = `
                  –ú–∞—Ä–∫–∞: ${brand}
                  –ö–∞—á–µ—Å—Ç–≤–æ: ${state[chatId].selectedFresh}
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state[chatId].selectedCarCategory}
                  –ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
                `;
                const isSent = await sendMessageToSeller(bot, sellerTgId, sellerMessage);
                if (isSent) {
                  const chatUrl = `tg://resolve?domain=${encodeURIComponent(part.chatUsername)}`;
                  const chatKeyboard = {
                    inline_keyboard: [
                      [{
                        text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                        url: chatUrl
                      }],
                      [{
                        text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                        callback_data: "find_command"
                      }],
                      [{
                        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data: "main_menu"
                      }]
                    ]
                  };
                  if (part.image && part.image.startsWith('./')) {
                    bot.sendPhoto(chatId, fs.createReadStream(part.image), {
                      caption: clientMessageText,
                      parse_mode: 'HTML',
                      reply_markup: chatKeyboard
                    });
                  } else {
                    bot.sendMessage(chatId, clientMessageText, {
                      parse_mode: 'HTML',
                      reply_markup: chatKeyboard
                    });
                  }
                } else {
                  bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥.');
                }
              } else {
                const chatKeyboard = {
                  inline_keyboard: [
                    [{
                      text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                      callback_data: "find_command"
                    }],
                    [{
                      text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "main_menu"
                    }]
                  ]
                };
                bot.sendMessage(chatId, '‚ùå –ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', {
                  reply_markup: chatKeyboard
                });
              }
            } else {
              const chatKeyboard = {
                inline_keyboard: [
                  [{
                    text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                    callback_data: "find_command"
                  }],
                  [{
                    text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data: "main_menu"
                  }]
                ]
              };
              bot.sendMessage(chatId, '–ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', {
                reply_markup: chatKeyboard
              });
            }
          }
        }

        if (otherResults && otherResults.length > 0) {
          const otherPartsList = otherResults.map(part => {
            const phones = part.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            return `üîß ${part.name}\nüìç –ê–¥—Ä–µ—Å: ${part.address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}`;
          }).join('\n\n');
          bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${brand}:\n\n${otherPartsList}`, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                  callback_data: "find_command"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            }
          });
        } else if (!paidResults || (paidResults.length === 0 && !otherResults)) {
          bot.sendMessage(chatId, `üòû –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${brand}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, {
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                  callback_data: "find_command"
                }]
              ]
            }
          });
        }
        break;
      case 'serviceregion':
        state[chatId].serviceRegion = parseInt(params[0]);
        state[chatId].currentServicePage = 0;
        showServicesPage(bot, chatId, 0);
        break;
      case 'service':
        const serviceKey = params.join('_');
        const originalServiceKey = serviceKey.replace(/_/g, ' ');
        const paidServices = findService(serviceKey, state[chatId].serviceTypeOrg, state[chatId].serviceRegion, true);
        const otherServices = findService(serviceKey, state[chatId].serviceTypeOrg, state[chatId].serviceRegion, false);

        if (paidServices && paidServices.length > 0) {
          for (const service of paidServices) {
            const phones = service.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            const clientMessage = `
              üîß ${service.name}
              üìç –ê–¥—Ä–µ—Å: ${service.address}
              üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}

              ${service.additional || ''}
            `.replace(/^[ \t]+/gm, '').trim();

            if (service.chatUsername) {
              const sellerTgId = getSellerChatId(service.chatUsername)[0].tgId;
              if (sellerTgId) {
                const sellerMessage = `
                  –£—Å–ª—É–≥–∞: ${originalServiceKey}
                  –ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
                `;
                const isSent = await sendMessageToSeller(bot, sellerTgId, sellerMessage);
                if (isSent) {
                  const chatUrl = `tg://resolve?domain=${encodeURIComponent(service.chatUsername)}`;
                  const keyboard = {
                    inline_keyboard: [
                      [{
                        text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                        url: chatUrl
                      }],
                      [{
                        text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                        callback_data: "command_service"
                      }],
                      [{
                        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data: "main_menu"
                      }]
                    ]
                  };
                  if (service.image) {
                    bot.sendPhoto(chatId, fs.createReadStream(service.image), {
                      caption: clientMessage,
                      parse_mode: 'HTML',
                      reply_markup: keyboard
                    });
                  } else {
                    bot.sendMessage(chatId, clientMessage, {
                      parse_mode: 'HTML',
                      reply_markup: keyboard
                    });
                  }
                } else {
                  bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
              }
            } else {
              const keyboard = {
                inline_keyboard: [
                  [{
                    text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                    callback_data: "command_service"
                  }],
                  [{
                    text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data: "main_menu"
                  }]
                ]
              };
              if (service.image) {
                bot.sendPhoto(chatId, fs.createReadStream(service.image), {
                  caption: clientMessage,
                  parse_mode: 'HTML',
                  reply_markup: keyboard
                });
              } else {
                bot.sendMessage(chatId, clientMessage, {
                  parse_mode: 'HTML',
                  reply_markup: keyboard
                });
              }
            }
          }
        }

        if (otherServices && otherServices.length > 0) {
          const otherServicesList = otherServices.map(service => {
            const phones = service.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            return `üîß ${service.name}\nüìç –ê–¥—Ä–µ—Å: ${service.address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}`;
          }).join('\n\n');
          bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è ${originalServiceKey}:\n\n${otherServicesList}`, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                  callback_data: "command_service"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            }
          });
        } else if (!paidServices || (paidServices.length === 0 && !otherServices)) {
          bot.sendMessage(chatId, `üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${originalServiceKey}"`, {
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                  callback_data: "command_service"
                }]
              ]
            }
          });
        }
        break;
      case 'lawyer':
        const lawyerKey = params.join('_');
        const originalLawyerKey = lawyerKey.replace(/_/g, ' ');
        const paidLawyers = findLawyer(lawyerKey, true);
        const otherLawyers = findLawyer(lawyerKey, false);

        if (paidLawyers && paidLawyers.length > 0) {
          for (const lawyer of paidLawyers) {
            const phones = lawyer.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            const clientMessage = `
              üîß ${lawyer.name}
              üìç –ê–¥—Ä–µ—Å: ${lawyer.address}
              üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}

              ${lawyer.additional}
            `.replace(/^[ \t]+/gm, '').trim();

            if (lawyer.chatUsername) {
              const sellerTgId = getSellerChatId(lawyer.chatUsername)[0].tgId;
              if (sellerTgId) {
                const sellerMessage = `
                  –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: ${originalLawyerKey}
                  –ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
                `;
                const isSent = await sendMessageToSeller(bot, sellerTgId, sellerMessage);
                if (isSent) {
                  const chatUrl = `tg://resolve?domain=${encodeURIComponent(lawyer.chatUsername)}`;
                  const keyboard = {
                    inline_keyboard: [
                      [{
                        text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                        url: chatUrl
                      }],
                      [{
                        text: "–ù–∞–∑–∞–¥ –∫ —é—Ä–∏—Å—Ç–∞–º",
                        callback_data: "command_lawyer"
                      }],
                      [{
                        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data: "main_menu"
                      }]
                    ]
                  };
                  if (lawyer.image) {
                    bot.sendPhoto(chatId, fs.createReadStream(lawyer.image), {
                      caption: clientMessage,
                      parse_mode: 'HTML',
                      reply_markup: keyboard
                    });
                  } else {
                    bot.sendMessage(chatId, clientMessage, {
                      parse_mode: 'HTML',
                      reply_markup: keyboard
                    });
                  }
                } else {
                  bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                }
              }
            } else {
              const keyboard = {
                inline_keyboard: [
                  [{
                    text: "–ù–∞–∑–∞–¥ –∫ —é—Ä–∏—Å—Ç–∞–º",
                    callback_data: "command_lawyer"
                  }],
                  [{
                    text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data: "main_menu"
                  }]
                ]
              };
              if (lawyer.image) {
                bot.sendPhoto(chatId, fs.createReadStream(lawyer.image), {
                  caption: clientMessage,
                  parse_mode: 'HTML',
                  reply_markup: keyboard
                });
              } else {
                bot.sendMessage(chatId, clientMessage, {
                  parse_mode: 'HTML',
                  reply_markup: keyboard
                });
              }
            }
          }
        }

        if (otherLawyers && otherLawyers.length > 0) {
          const otherLawyersList = otherLawyers.map(lawyer => {
            const phones = lawyer.key.split(', ').map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`).join(', ');
            return `
              üîß ${lawyer.name}
              üìç –ê–¥—Ä–µ—Å: ${lawyer.address}
              üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
              ${lawyer.additional ? `\n${lawyer.additional}` : ''}
            `.replace(/^[ \t]+/gm, '').trim();
          }).join('\n\n');
          bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã —é—Ä–∏—Å—Ç—ã –¥–ª—è ${originalLawyerKey}:\n\n${otherLawyersList}`, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ —é—Ä–∏—Å—Ç–∞–º",
                  callback_data: "command_lawyer"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            }
          });
        } else if (!paidLawyers || (paidLawyers.length === 0 && !otherLawyers)) {
          bot.sendMessage(chatId, `üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${originalLawyerKey}"`, {
            reply_markup: {
              inline_keyboard: [
                [{
                  text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                  callback_data: "command_lawyer"
                }]
              ]
            }
          });
        }
        break;
      case 'sell':
        if (params[0] === 'command') {
          showSellType(bot, chatId);
        } else if (params[0] === 'type') {
          state[chatId].sellTCType = params[1];
          showHowSell(bot, chatId);
        } else if (params[0] === 'how') {
          state[chatId].sellHow = params[1];
          showSellerInfo(bot, chatId, query, state[chatId]);
        }
        break;
      case 'products':
        if (params[0] === 'command') {
          showProductsType(bot, chatId);
        } else if (params[0] === 'type') {
          state[chatId].productType = params[1];
          const products = findProductByType(state[chatId].productType);
          if (products && products.length > 0) {
            const productList = products.map(product => {
              return `üõû <b>${product.name}</b>\nüí∞ –¶–µ–Ω–∞: ${product.price || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\nüìû –¢–µ–ª: ${product.phone || ''}\nüí¨ ${product.description || ''}`;
            }).join('\n\n');
            bot.sendMessage(chatId, productList, {
              parse_mode: 'HTML'
            });
          } else {
            bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
          }
        }
        break;
      case 'main':
        sendMainMenu(bot, chatId);
        break;
      case 'help':
        bot.sendMessage(chatId, 'üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @Gae4kinChaT');
        break;
      default:
        // Default case to handle unrecognized callbacks
        break;
    }

    bot.answerCallbackQuery(query.id);
  });
}

module.exports = {
  registerCallbackHandler
};