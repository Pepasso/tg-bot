// handlers/messageHandler.js

const {
  sendMessageToSeller
} = require('../services/senderService');
const sqlite = require('sqlite-sync');

function registerMessageHandler(bot, state) {
  bot.on('message', async (msg) => {
    // –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
    if (msg.contact) {
      const seller = getAndreyChatId();
      if (seller && seller.length > 0) {
        const sellerMessage = `
üì± –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
–ò–º—è: ${msg.from.first_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${msg.contact.phone_number}`;
        await sendMessageToSeller(bot, seller[0].tgId, sellerMessage);
        bot.sendMessage(msg.chat.id, '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!');
      }
    }
  });
}

function getAndreyChatId() {
  try {
    const query = `SELECT tgId, username FROM sellers WHERE id = 2`;
    const result = sqlite.run(query);
    return result ? result : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chatId –ê–Ω–¥—Ä–µ—è:', error);
    return null;
  }
}

module.exports = {
  registerMessageHandler
};