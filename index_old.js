const TelegramBot = require('node-telegram-bot-api');
const sqlite = require('sqlite-sync');
const config = require('./config.json');
const cron = require('node-cron');
//import('.add-db.js');
//import('.add-numbers.js');
//Connecting - if the file does not exist it will be created

sqlite.connect(config.db);

// replace the value below with the Telegram token you receive from @BotFather
const token = config.token;
const admin = config.admin;
const allowedTables = [
  'Acura',
  'AlfaRomeo',
  'AstonMartin',
  'Audi',
  'Bentley',
  'BMW',
  'Bugatti',
  'Buick',
  'Cadillac',
  'Canoo',
  'Chevrolet',
  'Chrysler',
  'DeLorean',
  'Dodge',
  'Ferrari',
  'Fiat',
  'Fisker',
  'Ford',
  'Genesis',
  'GMC',
  'Honda',
  'Hummer',
  'Hyundai',
  'Infiniti',
  'Jaguar',
  'Jeep',
  'Karma',
  'Kia',
  'Lamborghini',
  'LandRover',
  'Lexus',
  'Lincoln',
  'Lotus',
  'Maserati',
  'Maybach',
  'Mazda',
  'McLaren',
  'Mercedes',
  'Mercury',
  'Mini',
  'Mitsubishi',
  'Nissan',
  'Oldsmobile',
  'Polestar',
  'Pontiac',
  'Porsche',
  'Plymouth',
  'Ram',
  'Rivian',
  'RollsRoyce',
  'Saab',
  'Saturn',
  'Scion',
  'Smart',
  'Subaru',
  'Suzuki',
  'Tesla',
  'Toyota',
  'Volkswagen',
  'VinFast',
  'Volvo',
  'Vaz',
  'Volga',
  'Gaz',
  'Gazel',
  'Uaz'
]; // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü


const allowedServices = [
  '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
  '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ_–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
  '–∞–≤—Ç–æ–∑–≤—É–∫',
  '—á–∏–ø_—Ç—é–Ω–∏–Ω–≥',
  '—Ä–µ–º–æ–Ω—Ç_–ø–æ–¥–≤–µ—Å–∫–∏',
  '—Ä–µ–º–æ–Ω—Ç_–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞',
  '–∫—É–∑–æ–≤–Ω–æ–π_—Ä–µ–º–æ–Ω—Ç',
  '—Ä–µ–º–æ–Ω—Ç_–ö–ü–ü',
  '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
  '—ç–≤–∞–∫—É–∞—Ç–æ—Ä',
  '—Ä–µ–º–æ–Ω—Ç_–¥–∏—Å–∫–æ–≤'
];

const allowedLawyers = [
  '–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è_—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
  '–æ—Ü–µ–Ω–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è',
  '–∞–≤—Ç–æ—é—Ä–∏—Å—Ç',
  '–æ—Å–∞–≥–æ',
  '–∞–≤–∞–π—Ä–∏–Ω—ã–µ_–∫–æ–º–∏—Å—Å–∞—Ä—ã'
];

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
const CARS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
let currentPage = 0;
// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
const SERVICES_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
let currentServicePage = 0;
// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —é—Ä–∏—Å—Ç–æ–≤
const LAWYERS_PER_PAGE = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é—Ä–∏—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
let currentLawyersPage = 0;
let selectedCarCategory = null;
let selectedFresh = null;
let sellTCType = '';
let productType = '';
let sellHow = '';
let serviceTypeOrg = null;
let serviceRegion = null;
let lawyerRegion = null;


const bot = new TelegramBot(token, {
  polling: true,
  filepath: false
});

// –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
function sendMainMenu(chatId, messageIdToDelete = null) {
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (messageIdToDelete) {
    bot.deleteMessage(chatId, messageIdToDelete).catch(error => {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    });
  }

  const keyboard = {
    inline_keyboard: [
      [{
        text: "üîç –ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏",
        callback_data: "find_command"
      }],
      [{
        text: "üîß –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å",
        callback_data: "command_service"
      }],
      [{
        text: "‚öñÔ∏è –í—ã–±—Ä–∞—Ç—å —é—Ä.—É—Å–ª—É–≥—É",
        callback_data: "command_lawyer"
      }],
      [{
        text: "üí∏üöô –ü—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –∞–≤—Ç–æ",
        callback_data: "sell_command"
      }],
      [{
        text: "üõû –®–∏–Ω—ã/–¥–∏—Å–∫–∏",
        callback_data: "products_command"
      }],
      [{
        text: "üîó –ì–∞–µ—á–∫–∏–Ω –ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫",
        url: "https://t.me/Gae4kinNVKZ" // –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–≥—Ä—É–ø–ø—É
      }],
      [{
        text: "‚ùì –ü–æ–º–æ—â—å",
        callback_data: "help_command"
      }],
      /* [{ text: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data: "info_command" }] */
    ]
  };

  bot.sendMessage(chatId, 'üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞–µ—á–∫–∏–ΩBot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: keyboard
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const userId = msg.from.id;
  const userName = msg.from.username || 'unknown';
  const command = '/start';

  if (!userId) {
    console.error('–û—à–∏–±–∫–∞: user_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    return;
  }

  sqlite.run(
    'INSERT INTO command_logs (user_id, username, command) VALUES (?, ?, ?)',
    [userId, userName, command],
    function (err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', err);
      } else {
        console.log('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞, ID:', this.lastID);
      }
      sendMainMenu(msg.chat.id);
    }
  );
});

// –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:59
// cron.schedule('* * * * *', () => {
//   const today = new Date().toISOString().slice(0, 10); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)

//   sqlite.run(`
//     SELECT COUNT(*) as count 
//     FROM command_logs 
//     WHERE command = '/start' 
//       AND DATE(timestamp) = DATE(?)
//   `, [today], (err, row) => {

//     console.log(row)

//     const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${today}:\n` +
//       `–ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—â–µ–Ω–∞ ${row.count} —Ä–∞–∑.`;

//     // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
//     bot.sendMessage(config.admin, message)
//       .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err));
//   });
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const command = query.data;

  switch (command) {
    case 'find_command':
      bot.deleteMessage(chatId, query.message.message_id);
      currentPage = 0; // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      showCategoryKeyboard(chatId);
      // showBrandsPage(chatId, 0);
      break;

    case 'command_service':
      bot.deleteMessage(chatId, query.message.message_id);
      // showSerivceTypeKeyboard(chatId)
      showSerivceRegionKeyboard(chatId);
      break;

    case 'command_lawyer':
      bot.deleteMessage(chatId, query.message.message_id);
      currentLawyerPage = 0; // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      showLawyersPage(chatId, 0);
      break;
    case 'sell_command':
      bot.deleteMessage(chatId, query.message.message_id);
      showSellType(chatId);
      break;
    case 'products_command':
      bot.deleteMessage(chatId, query.message.message_id);
      showProductsType(chatId);
      break;
    case 'help_command':
      bot.deleteMessage(chatId, query.message.message_id);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
      bot.sendMessage(chatId, 'üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–ø–∏—à–∏—Ç–µ @Gae4kinChaT');
      break;
      /* 
          case 'info_command':
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            bot.sendMessage(chatId, '‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏. –í–µ—Ä—Å–∏—è 1.0\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @yourchannel');
            break; */
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
  bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  if (data.startsWith('page_')) {
    const page = parseInt(data.split('_')[1]);
    currentPage = page;
    bot.deleteMessage(chatId, query.message.message_id);
    showBrandsPage(chatId, page);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  if (data.startsWith('service_page_')) {
    const page = parseInt(data.split('_')[2]);
    currentServicePage = page;
    bot.deleteMessage(chatId, query.message.message_id);
    showServicesPage(chatId, page);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —é—Ä–∏—Å—Ç–æ–≤
  if (data.startsWith('lawyer_page_')) {
    const page = parseInt(data.split('_')[2]);
    currentLawyerPage = page;
    bot.deleteMessage(chatId, query.message.message_id);
    showLawyersPage(chatId, page);
  }

  if (data.startsWith('brand_')) {
    const brand = data.split('_')[1];
    try {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å isPayd = 1
      const paidResults = findModel(brand, selectedCarCategory, selectedFresh, true); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è isPayd
      const sortedPaidResults = paidResults.sort((a, b) => a.paydValue - b.paydValue); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ paydValue

      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: –ò—â–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const otherResults = findModel(brand, selectedCarCategory, selectedFresh, false); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è isPayd

      let otherPartsList = ''; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å isPayd = 1
      if (sortedPaidResults && sortedPaidResults.length > 0) {
        for (const part of sortedPaidResults) {
          const phones = part.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');

          // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
          const clientMessageText = `
üîß ${part.name}
üìç –ê–¥—Ä–µ—Å: ${part.address}
üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}

‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
`;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chatUsername
          if (part.chatUsername && part.chatUsername.trim() !== '') {
            // –ü–æ–ª—É—á–∞–µ–º tgId –ø—Ä–æ–¥–∞–≤—Ü–∞
            const sellerTgId = parseInt(getSellerChatId(part.chatUsername)[0].tgId);

            if (sellerTgId) {
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
              const uniqueId = Math.random().toString(36).substring(2, 8);

              // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
              const sellerMessage = `
–ú–∞—Ä–∫–∞: ${brand}
–ö–∞—á–µ—Å—Ç–≤–æ: ${selectedFresh}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedCarCategory}
–ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
`;

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
              const isSent = await sendMessageToSeller(sellerTgId, sellerMessage);

              if (isSent) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —á–∞—Ç"
                const chatUrl = `tg://resolve?domain=${encodeURIComponent(part.chatUsername)}`;
                const chatKeyboard = {
                  inline_keyboard: [
                    [{
                      text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                      url: chatUrl
                    }],
                    [{
                      text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                      callback_data: "find_command"
                    }],
                    [{
                      text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "main_menu"
                    }]
                  ]
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å) –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                if (part.image && part.image.startsWith('./')) {
                  bot.sendPhoto(chatId, require('fs').createReadStream(part.image), {
                    caption: clientMessageText,
                    parse_mode: 'HTML',
                    reply_markup: chatKeyboard
                  });
                } else {
                  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                  bot.sendMessage(chatId, clientMessageText, {
                    parse_mode: 'HTML',
                    reply_markup: chatKeyboard
                  });
                }
              } else {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥.');
              }
            } else {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tgId, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
              const chatKeyboard = {
                inline_keyboard: [
                  [{
                    text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                    callback_data: "find_command"
                  }],
                  [{
                    text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data: "main_menu"
                  }]
                ]
              };

              bot.sendMessage(chatId, '‚ùå –ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', {
                reply_markup: chatKeyboard
              });
            }
          } else {
            // –ï—Å–ª–∏ chatUsername –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            const chatKeyboard = {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                  callback_data: "find_command"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            };

            bot.sendMessage(chatId, '–ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', {
              reply_markup: chatKeyboard
            });
          }
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
      if (otherResults && otherResults.length > 0) {
        otherPartsList = otherResults.map(part => {
          const phones = part.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');
          return `üîß ${part.name}\nüìç –ê–¥—Ä–µ—Å: ${part.address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}`;
        }).join('\n\n');
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (otherPartsList) {
        bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è ${brand}:\n\n${otherPartsList}`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Ä–∫–∏",
                callback_data: "find_command"
              }],
              [{
                text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "main_menu"
              }]
            ]
          }
        });
      } else if (!sortedPaidResults || (sortedPaidResults.length === 0 && !otherPartsList)) {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        bot.sendMessage(chatId, `üòû –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${brand}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, {
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data: "find_command"
              }]
            ]
          }
        });
      }
    } catch (error) {
      console.error('Database error:', error);
      bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (data.startsWith('service_')) {
    const serviceKey = data.replace(/^service_/, '')
      .replace(/_/g, '')
      .replace(/([–∞-—è—ëa-z])([–ê-–Ø–ÅA-Z])/g, '$1 $2');

    const originalServiceKey = data.replace(/^service_/, '').replace(/_/g, ' ');

    console.log('serviceKey', serviceKey)

    try {
      // –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      const paidResults = await findService(serviceKey, true) || [];
      const sortedPaidResults = Array.isArray(paidResults) ?
        paidResults.sort((a, b) => a.paydValue - b.paydValue) : [];

      // –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      const otherResults = await findService(serviceKey, false) || [];

      let otherServicesList = '';
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      if (sortedPaidResults.length > 0) {
        for (const service of sortedPaidResults) {
          const phones = service.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');

          if (service.chatUsername) {
            const clientMessage = `
            üîß ${service.name}
            üìç –ê–¥—Ä–µ—Å: ${service.address}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
          
            ${service.additional || ''}
          `.replace(/^[ \t]+/gm, '').trim();
            const sellerTgId = getSellerChatId(service.chatUsername)[0].tgId;

            if (sellerTgId) {
              const uniqueId = Math.random().toString(36).substring(2, 8);
              const sellerMessage = `
–£—Å–ª—É–≥–∞: ${originalServiceKey}
–ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
`;

              const isSent = await sendMessageToSeller(sellerTgId, sellerMessage);

              if (isSent) {
                const chatUrl = `tg://resolve?domain=${encodeURIComponent(service.chatUsername)}`;
                const keyboard = {
                  inline_keyboard: [
                    [{
                      text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                      url: chatUrl
                    }],
                    [{
                      text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                      callback_data: "command_service"
                    }],
                    [{
                      text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "main_menu"
                    }]
                  ]
                };

                if (service.image) {
                  bot.sendPhoto(chatId, require('fs').createReadStream(service.image), {
                    caption: clientMessage,
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                  });
                } else {
                  bot.sendMessage(chatId, clientMessage, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                  });
                }
              } else {
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
              }
            }
          } else {
            const clientMessage = `
            üîß ${service.name}
            üìç –ê–¥—Ä–µ—Å: ${service.address}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
          
            ${service.additional || ''}
          `.replace(/^[ \t]+/gm, '').trim();
            const keyboard = {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                  callback_data: "command_service"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            };

            if (service.image) {
              bot.sendPhoto(chatId, require('fs').createReadStream(service.image), {
                caption: clientMessage,
                parse_mode: 'HTML',
                reply_markup: keyboard
              });
            } else {
              bot.sendMessage(chatId, clientMessage, {
                parse_mode: 'HTML',
                reply_markup: keyboard
              });
            }
          }
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      if (otherResults.length > 0) {
        otherServicesList = otherResults.map(service => {
          const phones = service.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');
          return `üîß ${service.name}\nüìç –ê–¥—Ä–µ—Å: ${service.address}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}`;
        }).join('\n\n');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (otherServicesList) {
        if (sortedPaidResults.length) {
          await delay(2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        }

        await bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è ${originalServiceKey}:\n\n${otherServicesList}`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                callback_data: "command_service"
              }],
              [{
                text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "main_menu"
              }]
            ]
          }
        });
      } else if (!sortedPaidResults.length && !otherResults.length) {
        await bot.sendMessage(chatId, `üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${originalServiceKey}"`, {
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data: "command_service"
              }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('Service error:', error);
      bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (data.startsWith('lawyer_')) {
    const lawyerKey = data.replace(/^lawyer_/, '')
      .replace(/_/g, '')
      .replace(/([–∞-—è—ëa-z])([–ê-–Ø–ÅA-Z])/g, '$1 $2');

    const originalLawyerKey = data.replace(/^lawyer_/, '').replace(/_/g, ' ');

    try {
      // –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤
      const paidResults = await findLawyer(lawyerKey, true) || [];
      const sortedPaidResults = Array.isArray(paidResults) ?
        paidResults.sort((a, b) => a.paydValue - b.paydValue) : [];

      // –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤
      const otherResults = await findLawyer(lawyerKey, false) || [];

      let otherLawyersList = '';

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤
      if (sortedPaidResults.length > 0) {
        for (const lawyer of sortedPaidResults) {
          const phones = lawyer.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');


          const clientMessage = `
            üîß ${lawyer.name}
            üìç –ê–¥—Ä–µ—Å: ${lawyer.address}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
            
            ${lawyer.additional}
          `.replace(/^[ \t]+/gm, '').trim();

          if (lawyer.chatUsername) {
            const sellerTgId = getSellerChatId(lawyer.chatUsername)[0].tgId;

            if (sellerTgId) {
              const uniqueId = Math.random().toString(36).substring(2, 8);
              const sellerMessage = `
  –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: ${originalLawyerKey}
  –ö–ª–∏–µ–Ω—Ç: ${query.message.from.first_name} (${query.message.from.id})
  `;

              const isSent = await sendMessageToSeller(sellerTgId, sellerMessage);

              if (isSent) {
                const chatUrl = `tg://resolve?domain=${encodeURIComponent(lawyer.chatUsername)}`;
                const keyboard = {
                  inline_keyboard: [
                    [{
                      text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
                      url: chatUrl
                    }],
                    [{
                      text: "–ù–∞–∑–∞–¥ –∫ —é—Ä–∏—Å—Ç–∞–º",
                      callback_data: "command_lawyer"
                    }],
                    [{
                      text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "main_menu"
                    }]
                  ]
                };

                if (lawyer.image) {
                  bot.sendPhoto(chatId, require('fs').createReadStream(lawyer.image), {
                    caption: clientMessage,
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                  });
                } else {
                  bot.sendMessage(chatId, clientMessage, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                  });
                }
              } else {
                bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
              }
            }
          } else {

            const clientMessage = `
              üîß ${lawyer.name}
              üìç –ê–¥—Ä–µ—Å: ${lawyer.address}
              üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
              
              ${lawyer.additional}
            `.replace(/^[ \t]+/gm, '').trim();

            const keyboard = {
              inline_keyboard: [
                [{
                  text: "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                  callback_data: "command_lawyer"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "main_menu"
                }]
              ]
            };

            if (lawyer.image) {
              bot.sendPhoto(chatId, require('fs').createReadStream(lawyer.image), {
                caption: clientMessage,
                parse_mode: 'HTML',
                reply_markup: keyboard
              });
            } else {
              bot.sendMessage(chatId, clientMessage, {
                parse_mode: 'HTML',
                reply_markup: keyboard
              });
            }
          }
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      if (otherResults.length > 0) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2—Å

        otherLawyersList = otherResults.map(lawyer => {
          const phones = lawyer.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');

          return `
            üîß ${lawyer.name}
            üìç –ê–¥—Ä–µ—Å: ${lawyer.address}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
            ${lawyer.additional ? `\n${lawyer.additional}` : ''}
          `.replace(/^[ \t]+/gm, '').trim();
        }).join('\n\n');
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (otherLawyersList) {
        await bot.sendMessage(chatId, `‚úÖ –ù–∞–π–¥–µ–Ω—ã —é—Ä–∏—Å—Ç—ã –¥–ª—è ${originalLawyerKey}:\n\n${otherLawyersList}`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ù–∞–∑–∞–¥ –∫ —é—Ä–∏—Å—Ç–∞–º",
                callback_data: "command_lawyer"
              }],
              [{
                text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "main_menu"
              }]
            ]
          }
        });
      } else if (!sortedPaidResults.length && !otherResults.length) {
        await bot.sendMessage(chatId, `üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${originalLawyerKey}"`, {
          reply_markup: {
            inline_keyboard: [
              [{
                text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data: "command_lawyer"
              }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('Lawyer error:', error);
      bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (data.startsWith("category_")) {
    const category = parseInt(data.split("_")[1]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    selectedCarCategory = category;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ö–∞—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—á–∞—Å—Ç–µ–π
    showPartsFresh(chatId);
  }

  if (data.startsWith("fresh_")) {
    const fresh = parseInt(data.split("_")[1]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    selectedFresh = fresh;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    currentPage = 0; // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if (selectedCarCategory === 0) {
      showBrandsPage(chatId, 0);
    }
  }

  // if (data.startsWith("servicetype_")) {
  //   const servicetype = parseInt(data.split("_")[1]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
  //   serviceTypeOrg = servicetype;
  //   bot.deleteMessage(chatId, query.message.message_id);
  //   // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  //   showSerivceRegionKeyboard(chatId);
  // }

  if (data.startsWith("serviceregion_")) {
    const serviceregion = parseInt(data.split("_")[1]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    serviceRegion = serviceregion;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    currentServicePage = 0; // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    showServicesPage(chatId, 0);
  }

  if (data.startsWith("sellType_")) {
    const sell = data.split("_")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    sellTCType = sell;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    showHowSell(chatId);
  }

  if (data.startsWith("productsType_")) {
    const product = data.split("_")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    productType = product;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    showHowSell(chatId);
  }

  if (data.startsWith("howSell_")) {
    const sell = data.split("_")[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    sellHow = sell;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    showSellerInfo(chatId, query);
  }


  if (data === 'main_menu') {
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await bot.deleteMessage(chatId, query.message.message_id);
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }

    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    sendMainMenu(chatId);
  }

  bot.answerCallbackQuery(query.id);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è tgId –ø–æ username
function getSellerChatId(username) {
  try {
    const query = `SELECT tgId FROM sellers WHERE username = '${username}'`;
    const result = sqlite.run(query); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    console.log(`Query: ${query}, Username: ${username}`);
    console.log('Result:', result);
    return result ? result : null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º tgId, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ tgId –ø–æ username:', error.message);
    return null;
  }
}

function getAndreyChatId() {
  try {
    const query = `SELECT tgId, username FROM sellers WHERE id = 2`;
    const result = sqlite.run(query); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    return result ? result : null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º tgId, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ tgId –ø–æ username:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É
async function sendMessageToSeller(tgId, message) {
  try {
    if (!tgId || isNaN(tgId)) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tgId:', tgId);
      return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, –µ—Å–ª–∏ tgId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    await bot.sendMessage(tgId, message, {
      parse_mode: 'HTML'
    });
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É —Å tgId=${tgId}.`);
    return true;
  } catch (error) {
    if (error.response && error.response.body.description.includes('chat not found')) {
      console.error('–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.');
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É:', error.message);
    }
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatId –ø–æ username
async function getChatIdByUsername(username) {
  try {
    const chat = await bot.getChat(`@${username}`);
    return chat.id;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chatId –ø–æ username:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (admin) {
  bot.onText(/\/register_seller/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || 'no_username';

    try {
      sqlite.run("INSERT OR REPLACE INTO sellers (username, tgId) VALUES (?, ?)", [username, chatId]);
      bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }
  });
}

function showCategoryKeyboard(chatId) {
  const categoryKeyboard = {
    inline_keyboard: [
      [{
          text: "–î–ª—è –º–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏",
          callback_data: "category_1"
        },
        {
          text: "–î–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ",
          callback_data: "category_0"
        }
      ],
      [{
          text: "–ì—Ä—É–∑–æ–≤–æ–π –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
          callback_data: "category_3"
        },
        {
          text: "–î–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏",
          callback_data: "category_4"
        }
      ]
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
    reply_markup: categoryKeyboard
  });
}

function showPartsFresh(chatId) {
  const categoryKeyboard = {
    inline_keyboard: [
      [{
          text: "–ù–æ–≤—ã–µ",
          callback_data: "fresh_1"
        },
        {
          text: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ",
          callback_data: "fresh_2"
        }
      ],
      [{
          text: "–ë/–£",
          callback_data: "fresh_3",

        },
        {
          text: "–ê–≤—Ç–æ—Ä–∞–∑–±–æ—Ä",
          callback_data: "fresh_4"
        }
      ]
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
    reply_markup: categoryKeyboard
  });
}

// function showSerivceTypeKeyboard(chatId) {
//   const serviceTypeKeyboard = {
//     inline_keyboard: [
//       [{
//           text: "–ß–∞—Å—Ç–Ω–∏–∫",
//           callback_data: "servicetype_0"
//         },
//         {
//           text: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
//           callback_data: "servicetype_1"
//         }
//       ],
//     ]
//   };

//   bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞:", {
//     reply_markup: serviceTypeKeyboard
//   });
// }

function showSerivceRegionKeyboard(chatId) {
  const serviceRegionKeyboard = {
    inline_keyboard: [
      [{
          text: "–¶–µ–Ω—Ç—Ä",
          callback_data: "serviceregion_1"
        },
        {
          text: "–ò–ª—å–∏–Ω–∫–∞",
          callback_data: "serviceregion_2"
        }
      ],
      [{
          text: "–ó–∞–ø—Å–∏–±",
          callback_data: "serviceregion_3"
        },
        {
          text: "–ö—É–π–±—ã—à–µ–≤–æ",
          callback_data: "serviceregion_4"
        }
      ],
      [{
        text: "–ö—É–∑–Ω–µ—Ü–∫",
        callback_data: "serviceregion_5"
      }],
    ]
  };

  bot.sendMessage(chatId, "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", {
    reply_markup: serviceRegionKeyboard
  });
}

function getCategoryName(category) {
  switch (category) {
    case 1:
      return "–î–ª—è –º–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏";
    case 2:
      return "–î–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ";
    case 3:
      return "–ì—Ä—É–∑–æ–≤–æ–π –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç";
    case 4:
      return "–î–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏";
    default:
      return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è";
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–∞—Ä–∫–∞–º–∏
function showBrandsPage(chatId, page) {
  const start = page * CARS_PER_PAGE;
  const end = start + CARS_PER_PAGE;
  const currentBrands = allowedTables.slice(start, end);

  const keyboardRows = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
  while (currentBrands.length) {
    keyboardRows.push(currentBrands.splice(0, 3));
  }

  const paginationButtons = [];

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  if (page > 0) {
    paginationButtons.push({
      text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `page_${page-1}`
    });
  }
  if (end < allowedTables.length) {
    paginationButtons.push({
      text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
      callback_data: `page_${page+1}`
    });
  }

  const brandKeyboard = {
    inline_keyboard: [
      ...keyboardRows.map(row => row.map(brand => ({
        text: brand,
        callback_data: `brand_${brand}`
      }))),
      paginationButtons,
      [{
        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data: "main_menu"
      }]
    ]
  };

  bot.sendMessage(chatId, `üöò –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page+1}/${Math.ceil(allowedTables.length/CARS_PER_PAGE)}):`, {
    reply_markup: brandKeyboard
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–∂–∏
function showSellType(chatId) {
  const sellTypeKeyboard = {
    inline_keyboard: [
      [{
          text: "–õ–µ–≥–∫–æ–≤—ã–µ",
          callback_data: "sellType_–õ–µ–≥–∫–æ–≤—ã–µ"
        },
        {
          text: "–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞",
          callback_data: "sellType_–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞"
        }
      ],
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¢–°:", {
    reply_markup: sellTypeKeyboard
  });
}

function showProductsType(chatId) {
  const productsTypeKeyboard = {
    inline_keyboard: [
      [{
          text: "–ê–∫—Å–µ—Å—Å—É—Ä—ã",
          callback_data: "productsType_–ê–∫—Å–µ—Å—Å—É—Ä—ã"
        },
        {
          text: "–®–∏–Ω—ã",
          callback_data: "productsType_–®–∏–Ω—ã"
        },
        {
          text: "–î–∏—Å–∫–∏",
          callback_data: "productsType_–î–∏—Å–∫–∏"
        },
        {
          text: "–ö–æ–º–ø–ª–µ–∫—Ç—ã",
          callback_data: "productsType_–ö–æ–º–ø–ª–µ–∫—Ç—ã"
        },
        {
          text: "–£—Å–ª—É–≥–∏/—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂",
          callback_data: "productsType_–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂"
        },
      ],
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
    reply_markup: productsTypeKeyboard
  });
}

function showHowSell(chatId) {
  const sellHowKeyboard = {
    inline_keyboard: [
      [{
          text: "–ü—Ä–æ–¥–∞—Ç—å (–≤—ã–∫—É–ø)",
          callback_data: "howSell_–ü—Ä–æ–¥–∞—Ç—å(–≤—ã–∫—É–ø)"
        },
        {
          text: "–ê–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥",
          callback_data: "howSell_–ê–≤—Ç–æ–ª–∞–º–±–∞—Ä–¥"
        },
        {
          text: "–ö—É–ø–∏—Ç—å",
          callback_data: "howSell_–ö—É–ø–∏—Ç—å"
        }
      ],
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏:", {
    reply_markup: sellHowKeyboard
  });
}

function showHowSell(chatId) {
  const sellHowKeyboard = {
    inline_keyboard: [
      [{
          text: "–ü—Ä–æ–¥–∞—Ç—å (–≤—ã–∫—É–ø)",
          callback_data: "howSell_–ü—Ä–æ–¥–∞—Ç—å(–≤—ã–∫—É–ø)"
        },
        {
          text: "–ê–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥",
          callback_data: "howSell_–ê–≤—Ç–æ–ª–∞–º–±–∞—Ä–¥"
        },
        {
          text: "–ö—É–ø–∏—Ç—å",
          callback_data: "howSell_–ö—É–ø–∏—Ç—å"
        }
      ],
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏:", {
    reply_markup: sellHowKeyboard
  });
}

async function showSellerInfo(chatId, query) {
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
  let usernameInfo = '';
  if (query.from.username) {
    usernameInfo = ` (USERNAME: @${query.from.username})`;
  }

  const sellerMessage = `
  üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –∞–≤—Ç–æ!
  –í–∏–¥ –¢–°: ${sellTCType}
  –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: ${sellHow}
  –ö–ª–∏–µ–Ω—Ç: ${query.from.first_name}${usernameInfo}
  `;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–æ–º
    const sellerData = getAndreyChatId(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [ { tgId: 1024842449 } ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–ª—É—á–µ–Ω—ã
    if (!sellerData || sellerData.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    const firstSeller = sellerData[0];

    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const sellerTgId = firstSeller.tgId; // 1024842449 (—É–∂–µ —á–∏—Å–ª–æ)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    const isSent = await sendMessageToSeller(sellerTgId, sellerMessage);

    if (isSent) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —á–∞—Ç"
      const chatUrl = `tg://resolve?domain=${encodeURIComponent(firstSeller.username)}`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatUsername, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const chatKeyboard = {
        inline_keyboard: [
          [{
            text: "–ù–∞—á–∞—Ç—å —á–∞—Ç",
            url: chatUrl
          }],
          [{
            text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data: "main_menu"
          }]
        ]
      };

      // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const clientMessage = `
üöò –û—Å—Ç–∞–≤—Ç–µ –∑–∞—è–≤–∫—É, –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏–µ–¥–µ–º –Ω–∞ –æ—Å–º–æ—Ç—Ä.
–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+79134363667">+79134363667</a>.
`;

      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, clientMessage, {
        parse_mode: 'HTML',
        reply_markup: chatKeyboard
      });

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
      const contactKeyboard = {
        reply_markup: {
          keyboard: [
            [{
              text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
              request_contact: true
            }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };

      // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!", contactKeyboard);

      // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const contactHandler = async (msg) => {
        if (msg.contact) {
          // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          bot.removeListener('message', contactHandler);

          if (!sellerData.length) throw new Error('–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');

          const sellerMessage = `
üì± –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
–ò–º—è: ${msg.from.first_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${msg.contact.phone_number}
`;

          await sendMessageToSeller(sellerData[0].tgId, sellerMessage);
          await bot.sendMessage(chatId, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!");
        }
      };

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      bot.on('message', contactHandler);
    } else {
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{
              text: "–ù–∞–∑–∞–¥",
              callback_data: "sell_command"
            }]
          ]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ä–≤–∏—Å–æ–≤
function showServicesPage(chatId, page) {
  const start = page * SERVICES_PER_PAGE;
  const end = start + SERVICES_PER_PAGE;
  const currentServices = allowedServices.slice(start, end);

  const keyboardRows = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
  while (currentServices.length) {
    keyboardRows.push(currentServices.splice(0, 2));
  }

  const paginationButtons = [];

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  if (page > 0) {
    paginationButtons.push({
      text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `service_page_${page-1}`
    });
  }
  if (end < allowedServices.length) {
    paginationButtons.push({
      text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
      callback_data: `service_page_${page+1}`
    });
  }

  const serviceKeyboard = {
    inline_keyboard: [
      ...keyboardRows.map(row => row.map(service => ({
        text: service.replace(/_/g, ' '),
        callback_data: `service_${service.replace(/\s+/g, '_')}`
      }))),
      paginationButtons,
      [{
        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data: "main_menu"
      }]
    ]
  };

  bot.sendMessage(chatId, `üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page+1}/${Math.ceil(allowedServices.length/SERVICES_PER_PAGE)}):`, {
    reply_markup: serviceKeyboard
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —é—Ä.—É—Å–ª—É–≥
function showLawyersPage(chatId, page) {
  const start = page * LAWYERS_PER_PAGE;
  const end = start + LAWYERS_PER_PAGE;
  const currentLawyer = allowedLawyers.slice(start, end);

  const keyboardRows = [];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
  while (currentLawyer.length) {
    keyboardRows.push(currentLawyer.splice(0, 2));
  }

  const paginationButtons = [];

  // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  if (page > 0) {
    paginationButtons.push({
      text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `lawyer_page_${page-1}`
    });
  }
  if (end < allowedLawyers.length) {
    paginationButtons.push({
      text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
      callback_data: `lawyer_page_${page+1}`
    });
  }

  const lawyerKeyboard = {
    inline_keyboard: [
      ...keyboardRows.map(row => row.map(lawyer => ({
        text: lawyer.replace(/_/g, ' '),
        callback_data: `lawyer_${lawyer.replace(/\s+/g, '_')}`
      }))),
      paginationButtons,
      [{
        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data: "main_menu"
      }]
    ]
  };

  bot.sendMessage(chatId, `‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —é—Ä —É—Å–ª—É–≥—É (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page+1}/${Math.ceil(allowedLawyers.length/LAWYERS_PER_PAGE)}):`, {
    reply_markup: lawyerKeyboard
  });
}

//const models = ['audi', 'bmw'];
/* let model; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è model
const addMode = {};
let countStep = 1;

// Retrieve message from database
bot.onText(/\/find ([^;'\"]+)/, (msg, match) => {
  model = null;
  //const key = match[1];
  //const message = getMessage(key);
  //if (message.exists) {
  //bot.forwardMessage(msg.chat.id, message.from_id, message.message_id);
  //}
  const chatId = msg.chat.id;
  const keyFirst = match[1].toLowerCase(); // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Å—å –∫–ª—é—á –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  const key = keyFirst.charAt(0).toUpperCase() + keyFirst.slice(1); // –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  const uniqueKey = key + Date.now(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
  console.log(key);
  if (key && uniqueKey) {
    model = findModel(key);
    processCarDetailInput(chatId, msg.text, 2);
  }
});

bot.onText(/\/service ([^;'\"]+)/, (msg, match) => {
  model = null;
  //const key = match[1];
  //const message = getMessage(key);
  //if (message.exists) {
  //bot.forwardMessage(msg.chat.id, message.from_id, message.message_id);
  //}
  const chatId = msg.chat.id;
  const keyFirst = match[1].toLowerCase(); // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Å—å –∫–ª—é—á –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  const key = keyFirst.charAt(0).toUpperCase() + keyFirst.slice(1); // –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  const uniqueKey = key + Date.now(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
  console.log(key);
  if (key && uniqueKey) {
    model = getKeyBySynonym(key, chatId, msg.text, 2);
  }
}); */

/* bot.onText(/\/lawyer([^;'\"]+)/, (msg, match) => {
  model = null;
  //const key = match[1];
  //const message = getMessage(key);
  //if (message.exists) {
  //bot.forwardMessage(msg.chat.id, message.from_id, message.message_id);
  //}
  const chatId = msg.chat.id;
  const keyFirst = match[1].toLowerCase(); // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Å—å –∫–ª—é—á –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  const key = keyFirst.charAt(0).toUpperCase() + keyFirst.slice(1); // –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
  const uniqueKey = key + Date.now(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
  console.log(key);
  if (key && uniqueKey) {
    model = findLawyer(key);
    processCarDetailInput(chatId, msg.text, 2);
  }
});
 */
if (admin) {
  // Add message to database
  bot.onText(/\/add ([^;'\"]+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const key = match[1];
    var text = '';
    if (isMessageExists(key)) {
      text = 'Sorry, message with this key already exists.';
    } else {
      addMode[chatId] = {
        key: key,
        from: msg.from.id
      };
      text = 'Now send me a message that needs to be saved. ' +
        'Or /cancel to abort operation.';
    }
    bot.sendMessage(chatId, text);
  });
}

/* bot.onText(/(.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  if (!messageText.startsWith('/find')) {
    if (chatId in addMode) {
      if (countStep == 1) {
        processCarDetailInput(chatId, msg.text, 1);
        countStep++;
      } else if (countStep == 2) {
        processCarDetailInput(chatId, msg.text, 2);
        countStep = 1;
      }
    }
  }
}); */

if (admin) {
  // Get list of messages for current user
  bot.onText(/\/list/, (msg) => {
    const chatId = msg.chat.id;
    const fromId = msg.from.id;
    const data = sqlite.run(
      "SELECT `key` FROM messages WHERE `from_id` = ?",
      [fromId]);
    if (data.length == 0) {
      bot.sendMessage(chatId, 'You have not added anything.');
      return;
    }
    var lines = [];
    data.forEach(function (element) {
      lines.push('`' + element.key + '`');
    });
    bot.sendMessage(chatId, lines.join(', '), {
      parse_mode: 'markdown'
    });
  });

  // Remove message from database
  bot.onText(/\/remove ([^;'\"]+)/, (msg, match) => {
    const key = match[1];
    const message = getMessage(key);
    if (!message.exists) return;
    if (message.from_id != msg.from.id) return;

    sqlite.delete('messages', {
      'key': key
    }, function (res) {
      if (!res.error) {
        bot.sendMessage(msg.chat.id, 'Message successfully deleted!');
      }
    });
  });
}

function isMessageExists(key) {
  return sqlite.run(
    "SELECT COUNT(*) as cnt FROM messages WHERE `key` = ?",
    [key])[0].cnt != 0;
}

function getMessage(key) {
  const data = sqlite.run(
    "SELECT * FROM messages WHERE `key` = ? LIMIT 1",
    [key]);
  if (data.length == 0) {
    return {
      exists: false
    };
  }
  data[0].exists = true;
  return data[0];
}

function findModel(key, selectedCarCategory, selectedFresh, isPaidOnly = false) {
  const sanitizedKey = allowedTables.includes(key) ? key : null;
  let carCategoryTable = '';
  if (selectedCarCategory === 0) {
    carCategoryTable = 'carParts';
  } else if (selectedCarCategory === 1) {
    carCategoryTable = 'motoParts';
  } else if (selectedCarCategory === 3) {
    carCategoryTable = 'gruzParts';
  } else if (selectedCarCategory === 4) {
    carCategoryTable = 'commerParts';
  } else if (selectedCarCategory === 5) {
    carCategoryTable = 'specParts';
  }
  if (sanitizedKey) {
    let query = `SELECT key, address, name, image, chatUsername FROM ${carCategoryTable} WHERE ${sanitizedKey} = 1`;

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è selectedCarCategory, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
    if (selectedCarCategory !== null && selectedCarCategory !== undefined) {
      const parsedCategory = parseInt(selectedCarCategory);
      if (!isNaN(parsedCategory)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ whatType –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ parsedCategory,
        // –ª–∏–±–æ —Ä–∞–≤–Ω–æ '0' (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π)
        query += ` AND (whatType LIKE '%,${parsedCategory},%' 
                          OR whatType LIKE '${parsedCategory},%' 
                          OR whatType LIKE '%,${parsedCategory}' 
                          OR whatType = '${parsedCategory}')`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è selectedFresh, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
    if (selectedFresh !== null && selectedFresh !== undefined) {
      if (parseInt(selectedFresh) === 1) {
        query += ` AND isPartNew = ${parseInt(selectedFresh)}`;
      } else if (parseInt(selectedFresh) === 2) {
        query += ` AND isPartContract = ${parseInt(selectedFresh)}`;
      } else if (parseInt(selectedFresh) === 3) {
        query += ` AND isPartUsed = ${parseInt(selectedFresh)}`;
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ isPayd
    if (isPaidOnly) {
      query += ` AND isPayd = 1`; // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    } else {
      query += ` AND isPayd = 0`; // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    }

    try {
      const results = sqlite.run(query); // –ò—Å–ø–æ–ª—å–∑—É–µ–º sqlite.all –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
      return results || []; // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err.message);
      return false;
    }
  } else {
    console.error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞:", key);
    return false;
  }
}

/* function getKeyBySynonym(input, chatId, msg, index) {
  const allowedTables = [
    '—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
    '–∞–≤—Ç–æ —Å–µ—Ä–≤–∏—Å',
    '—Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏',
    '—Ä–µ–º–æ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞',
    '–∫—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç',
    '—Ä–µ–º–æ–Ω—Ç –ö–ü–ü',
    '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
    '—ç–∫–≤–∞–∫—É–∞—Ç–æ—Ä',
    '—Ä–µ–º–æ–Ω—Ç –¥–∏—Å–∫–æ–≤'
  ];

  for (const [key, values] of Object.entries(allowedTables)) {
    if (values.some(value => input.toLowerCase().includes(value.toLowerCase()))) {
      // If a match is found, return the key immediately
      model = findService(key);
      processCarDetailInput(chatId, msg, index);
    }
  }


  // If no match is found, return null or a default value
  return null;
} */


function findService(key, isPaidOnly = false) {
  if (key) {
    let query = `SELECT key, address, image, additional, chatUsername, name FROM service WHERE ${key} = 1`;

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è serviceTypeOrg
    if (serviceTypeOrg !== null && serviceTypeOrg !== undefined) {
      const parsedCategory = parseInt(serviceTypeOrg);
      if (!isNaN(parsedCategory)) {
        query += ` AND (is_organization = '2' OR is_organization = '${parsedCategory}')`;
      }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è serviceRegion
    if (serviceRegion !== null && serviceRegion !== undefined) {
      const parsedCategory = parseInt(serviceRegion);
      if (!isNaN(parsedCategory)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        query += ` AND (
          region = '${parsedCategory}' OR 
          (',' || region || ',') LIKE '%,${parsedCategory},%'
        )`;
      }
    }

    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è isPayd
    query += isPaidOnly ? ` AND isPayd = 1` : ` AND isPayd = 0`;

    console.log(query)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sqlite.all –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const results = sqlite.run(query);
      return results || [];
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err.message);
      return false;
    }
  } else {
    return false;
  }
}


function findLawyer(key, isPaidOnly = false) {
  if (key) {
    let query = `SELECT key, address, image, additional, chatUsername, name FROM lawyer WHERE ${key} = 1`;


    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è isPayd
    query += isPaidOnly ? ` AND isPayd = 1` : ` AND isPayd = 0`;


    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sqlite.all –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const results = sqlite.run(query);
      console.log('results', results)
      return results || [];
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err.message);
      return false;
    }
  } else {
    return false;
  }
}

// –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function formatText(text) {
  const maxLength = 255;
  if (!text) return '';

  if (text.length > maxLength) {
    const shortText = text.slice(0, maxLength) + '...';
    const encodedText = Buffer.from(text).toString('base64');
    return `
      ${shortText}
      <a href="tg://expand/${encodedText}">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>
    `;
  }
  return text;
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/* function processCarDetailInput(chatId, detail, step) {
  if (step == 1) {
    bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª—å –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:');
  } else if (step == 2) {
    const modelData = model;
    bot.sendMessage(chatId, '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:')
      .then(() => {
        if (modelData && modelData.length > 0) {
          return Promise.all(modelData.map(element => {
            const name = element.name ? element.name : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
            const address = element.address ? element.address : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
            const message = `–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${name},\n–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏: ${address},\n–ù–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: ${element.key}`;
            return bot.sendMessage(chatId, message);
          }));
        }
      })
      .catch((error) => {
        console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      });
  } else {
    bot.sendMessage(chatId, '–ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:')
      .then(() => bot.sendMessage(chatId, '(—Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä)'))
      .catch((error) => {
        console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      });
  }

  delete addMode[chatId]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ 'addMode' - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
} */