// services/searchService.js

const sqlite = require('sqlite-sync');
const {
  delay
} = require('../utils/textUtils');

const ITEMS_PER_PAGE = 15;

function paginateResults(results, page) {
  if (!Array.isArray(results)) return [];
  const start = page * ITEMS_PER_PAGE;
  const end = start + ITEMS_PER_PAGE;
  return results.slice(start, end);
}

function buildPaginationButtons(entity, page, totalItems, identifier) {
  const buttons = [];
  if (page > 0) {
    buttons.push({
      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `${identifier}_page_${page - 1}_${entity}`
    });
  }
  if ((page + 1) * ITEMS_PER_PAGE < totalItems) {
    buttons.push({
      text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
      callback_data: `${identifier}_page_${page + 1}_${entity}`
    });
  }
  return buttons;
}

function findModel(bot, chatId, state, brand, page = 0) {
  try {
    const {
      selectedCarCategory,
      selectedFresh
    } = state || {};
    const table = brand;
    const query = `SELECT * FROM ${table} WHERE category = ? AND fresh = ? ORDER BY id DESC`;
    const resultWrapper = sqlite.run(query, [selectedCarCategory, selectedFresh]);
    const allResults = Array.isArray(resultWrapper) ? resultWrapper : resultWrapper.data || [];
    const results = paginateResults(allResults, page);

    if (!results || results.length === 0) {
      return bot.sendMessage(chatId, 'üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.');
    }

    results.forEach(async (item, index) => {
      const caption = `üõ† <b>${item.name}</b>\nüì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${item.fresh === 1 ? '–ù–æ–≤–æ–µ' : '–ë/—É'}\nüí¨ ${item.description}`;
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É',
              url: `https://t.me/${item.seller_username}`
            }]
          ]
        }
      };

      await delay(index * 300);
      if (item.image && item.image.startsWith('http')) {
        bot.sendPhoto(chatId, item.image, {
          ...options,
          caption
        });
      } else {
        bot.sendMessage(chatId, caption, options);
      }
    });

    const pagination = buildPaginationButtons(brand, page, allResults.length, 'brand');
    if (pagination.length > 0) {
      bot.sendMessage(chatId, 'üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', {
        reply_markup: {
          inline_keyboard: [pagination]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–∏:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function findLawyers(bot, chatId, serviceName, page = 0) {
  try {
    const query = `SELECT * FROM lawyer WHERE service = ? ORDER BY id DESC`;
    const resultWrapper = sqlite.run(query, [serviceName]);
    const allResults = Array.isArray(resultWrapper) ? resultWrapper : resultWrapper.data || [];
    const results = paginateResults(allResults, page);

    if (!results || results.length === 0) {
      return bot.sendMessage(chatId, 'üö´ –Æ—Ä–∏—Å—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    results.forEach(async (item, index) => {
      const caption = `‚öñ <b>${item.name}</b>\nüìû –¢–µ–ª: ${item.phone || ''}\nüí¨ ${item.description || ''}`;
      const options = {
        parse_mode: 'HTML'
      };

      await delay(index * 300);
      if (item.image && item.image.startsWith('http')) {
        bot.sendPhoto(chatId, item.image, {
          ...options,
          caption
        });
      } else {
        bot.sendMessage(chatId, caption, options);
      }
    });

    const pagination = buildPaginationButtons(serviceName.replace(/ /g, '_'), page, allResults.length, 'lawyer');
    if (pagination.length > 0) {
      bot.sendMessage(chatId, 'üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', {
        reply_markup: {
          inline_keyboard: [pagination]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —é—Ä–∏—Å—Ç–æ–≤:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —é—Ä–∏—Å—Ç–æ–≤.');
  }
}

function findProductByType(bot, chatId, type, page = 0) {
  try {
    const query = `SELECT * FROM products WHERE type = ? ORDER BY id DESC`;
    const resultWrapper = sqlite.run(query, [type]);
    const allResults = Array.isArray(resultWrapper) ? resultWrapper : resultWrapper.data || [];
    const results = paginateResults(allResults, page);

    if (!results || results.length === 0) {
      return bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    results.forEach(async (item, index) => {
      const caption = `üõû <b>${item.name}</b>\nüí∞ –¶–µ–Ω–∞: ${item.price || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\nüìû –¢–µ–ª: ${item.phone || ''}\nüí¨ ${item.description || ''}`;
      const options = {
        parse_mode: 'HTML'
      };

      await delay(index * 300);
      if (item.image && item.image.startsWith('http')) {
        bot.sendPhoto(chatId, item.image, {
          ...options,
          caption
        });
      } else {
        bot.sendMessage(chatId, caption, options);
      }
    });

    const pagination = buildPaginationButtons(type.replace(/ /g, '_'), page, allResults.length, 'product');
    if (pagination.length > 0) {
      bot.sendMessage(chatId, 'üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', {
        reply_markup: {
          inline_keyboard: [pagination]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
}

function findService(bot, chatId, region, page = 0) {
  try {
    const query = `SELECT * FROM service WHERE region = ? ORDER BY id DESC`;
    const resultWrapper = sqlite.run(query, [region]);
    const allResults = Array.isArray(resultWrapper) ? resultWrapper : resultWrapper.data || [];
    const results = paginateResults(allResults, page);

    if (!results || results.length === 0) {
      return bot.sendMessage(chatId, 'üö´ –°–µ—Ä–≤–∏—Å–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    results.forEach(async (item, index) => {
      const caption = `üèô <b>${item.name}</b>\nüìç –ê–¥—Ä–µ—Å: ${item.address}\nüìû –¢–µ–ª: ${item.phone}\nüí¨ ${item.description || ''}`;
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üìç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
              url: item.map_url || `https://yandex.ru/maps/?text=${encodeURIComponent(item.address)}`
            }]
          ]
        }
      };

      await delay(index * 300);
      if (item.image && item.image.startsWith('http')) {
        bot.sendPhoto(chatId, item.image, {
          ...options,
          caption
        });
      } else {
        bot.sendMessage(chatId, caption, options);
      }
    });

    const pagination = buildPaginationButtons(region, page, allResults.length, 'service');
    if (pagination.length > 0) {
      bot.sendMessage(chatId, 'üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', {
        reply_markup: {
          inline_keyboard: [pagination]
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}

module.exports = {
  findModel,
  findLawyers,
  findProductByType,
  findService
};