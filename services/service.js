        callback_data: "command_service"
      }],
      [{
        text: "‚öñÔ∏è –í—ã–±—Ä–∞—Ç—å —é—Ä.—É—Å–ª—É–≥—É",
    case 'command_service':
      bot.deleteMessage(chatId, query.message.message_id);
      // showSerivceTypeKeyboard(chatId)
      showSerivceRegionKeyboard(chatId);
      break;

  if (data.startsWith('service_page_')) {
    const page = parseInt(data.split('_')[2]);
    currentServicePage = page;
    bot.deleteMessage(chatId, query.message.message_id);
    showServicesPage(chatId, page);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —é—Ä–∏—Å—Ç–æ–≤
  if (data.startsWith('service_')) {
    const serviceKey = data.replace(/^service_/, '')
      .replace(/_/g, '')
      .replace(/([–∞-—è—ëa-z])([–ê-–Ø–ÅA-Z])/g, '$1 $2');

    const originalServiceKey = data.replace(/^service_/, '').replace(/_/g, ' ');

    console.log('serviceKey', serviceKey)

    try {
      // –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      const paidResults = await findService(serviceKey, true) || [];
      const sortedPaidResults = Array.isArray(paidResults) ?
        paidResults.sort((a, b) => a.paydValue - b.paydValue) : [];

      // –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      const otherResults = await findService(serviceKey, false) || [];

      let otherServicesList = '';
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      if (sortedPaidResults.length > 0) {
        for (const service of sortedPaidResults) {
          const phones = service.key.split(', ')
            .map(num => `<a href="tel:${num.trim()}">${num.trim()}</a>`)
            .join(', ');

          if (service.chatUsername) {
            const clientMessage = `
            üîß ${service.name}
            üìç –ê–¥—Ä–µ—Å: ${service.address}
            üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones}
          
            ${service.additional || ''}
          `.replace(/^[ \t]+/gm, '').trim();
                      callback_data: "command_service"
                    }],
                    [{
                      text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                  callback_data: "command_service"
                }],
                [{
                  text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "command_service"
              }],
              [{
                text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "command_service"
              }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('Service error:', error);
      bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  if (data.startsWith("serviceregion_")) {
    const serviceregion = parseInt(data.split("_")[1]); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2, 3 –∏–ª–∏ 4)
    serviceRegion = serviceregion;
    bot.deleteMessage(chatId, query.message.message_id);
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ä–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    currentServicePage = 0; // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    showServicesPage(chatId, 0);
  }

          callback_data: "serviceregion_1"
        },
        {
          text: "–ò–ª—å–∏–Ω–∫–∞",
          callback_data: "serviceregion_2"
        }
      ],
      [{
          text: "–ó–∞–ø—Å–∏–±",
          callback_data: "serviceregion_3"
        },
        {
          text: "–ö—É–π–±—ã—à–µ–≤–æ",
          callback_data: "serviceregion_4"
        }
      ],
      [{
        text: "–ö—É–∑–Ω–µ—Ü–∫",
        callback_data: "serviceregion_5"
      }],
    ]
  };

  bot.sendMessage(chatId, "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", {
      callback_data: `service_page_${page-1}`
    });
  }
  if (end < allowedServices.length) {
    paginationButtons.push({
      text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
      callback_data: `service_page_${page+1}`
    });
  }

  const serviceKeyboard = {
        callback_data: `service_${service.replace(/\s+/g, '_')}`
      }))),
      paginationButtons,
      [{
        text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
      model = findService(key);
      processCarDetailInput(chatId, msg, index);
    }
  }


  // If no match is found, return null or a default value
  return null;
} */


function findService(key, isPaidOnly = false) {
  if (key) {
    let query = `SELECT key, address, image, additional, chatUsername, name FROM service WHERE ${key} = 1`;

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è serviceTypeOrg
    if (serviceTypeOrg !== null && serviceTypeOrg !== undefined) {
      const parsedCategory = parseInt(serviceTypeOrg);
      if (!isNaN(parsedCategory)) {
        query += ` AND (is_organization = '2' OR is_organization = '${parsedCategory}')`;
      }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è serviceRegion
    if (serviceRegion !== null && serviceRegion !== undefined) {
      const parsedCategory = parseInt(serviceRegion);
      if (!isNaN(parsedCategory)) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        query += ` AND (
          region = '${parsedCategory}' OR 
          (',' || region || ',') LIKE '%,${parsedCategory},%'
        )`;
      }
    }

    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è isPayd
    query += isPaidOnly ? ` AND isPayd = 1` : ` AND isPayd = 0`;

    console.log(query)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sqlite.all –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const results = sqlite.run(query);
      return results || [];
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err.message);
      return false;
    }
  } else {
    return false;
  }
}


