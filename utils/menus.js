// utils/menus.js

const {
  allowedTables,
  CARS_PER_PAGE
} = require('../core/constants');

function showCategoryKeyboard(bot, chatId) {
  const categoryKeyboard = {
    inline_keyboard: [
      [{
          text: '–î–ª—è –º–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏',
          callback_data: 'category_1'
        },
        {
          text: '–î–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ',
          callback_data: 'category_0'
        }
      ],
      [{
          text: '–ì—Ä—É–∑–æ–≤–æ–π –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
          callback_data: 'category_3'
        },
        {
          text: '–î–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏',
          callback_data: 'category_4'
        }
      ]
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: categoryKeyboard
  });
}

function showPartsFresh(bot, chatId) {
  const keyboard = {
    inline_keyboard: [
      [{
          text: '–ù–æ–≤—ã–µ',
          callback_data: 'fresh_1'
        },
        {
          text: '–ë/—É',
          callback_data: 'fresh_0'
        }
      ]
    ]
  };

  bot.sendMessage(chatId, '‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:', {
    reply_markup: keyboard
  });
}

function showBrandsPage(bot, chatId, page = 0) {
  const totalPages = Math.ceil(allowedTables.length / CARS_PER_PAGE);
  const brands = allowedTables.slice(page * CARS_PER_PAGE, (page + 1) * CARS_PER_PAGE);

  const inline_keyboard = brands.map((brand) => [{
    text: brand,
    callback_data: `brand_${brand}`
  }]);

  const navigation = [];
  if (page > 0) {
    navigation.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `brand_page_${page - 1}`
    });
  }
  if (page < totalPages - 1) {
    navigation.push({
      text: '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
      callback_data: `brand_page_${page + 1}`
    });
  }
  if (navigation.length) inline_keyboard.push(navigation);
  inline_keyboard.push([{
    text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    callback_data: 'main_menu'
  }]);

  bot.sendMessage(chatId, `üöó –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
    reply_markup: {
      inline_keyboard
    }
  });
}

function showServiceRegionKeyboard(bot, chatId) {
  const serviceRegionKeyboard = {
    inline_keyboard: [
      [{
          text: '–¶–µ–Ω—Ç—Ä',
          callback_data: 'serviceregion_1'
        },
        {
          text: '–ò–ª—å–∏–Ω–∫–∞',
          callback_data: 'serviceregion_2'
        }
      ],
      [{
          text: '–ó–∞–ø—Å–∏–±',
          callback_data: 'serviceregion_3'
        },
        {
          text: '–ö—É–π–±—ã—à–µ–≤–æ',
          callback_data: 'serviceregion_4'
        }
      ],
      [{
        text: '–ö—É–∑–Ω–µ—Ü–∫',
        callback_data: 'serviceregion_5'
      }]
    ]
  };

  bot.sendMessage(chatId, 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–∏—Å–∞:', {
    reply_markup: serviceRegionKeyboard
  });
}

function showSellType(bot, chatId) {
  const sellTypeKeyboard = {
    inline_keyboard: [
      [{
          text: '–õ–µ–≥–∫–æ–≤—ã–µ',
          callback_data: 'sellType_–õ–µ–≥–∫–æ–≤—ã–µ'
        },
        {
          text: '–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
          callback_data: 'sellType_–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞'
        }
      ]
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¢–°:', {
    reply_markup: sellTypeKeyboard
  });
}

function showProductsType(bot, chatId) {
  const productsTypeKeyboard = {
    inline_keyboard: [
      [{
          text: '–ê–∫—Å–µ—Å—Å—É—Ä—ã',
          callback_data: 'productsType_–ê–∫—Å–µ—Å—Å—É—Ä—ã'
        },
        {
          text: '–®–∏–Ω—ã',
          callback_data: 'productsType_–®–∏–Ω—ã'
        },
        {
          text: '–î–∏—Å–∫–∏',
          callback_data: 'productsType_–î–∏—Å–∫–∏'
        },
        {
          text: '–ö–æ–º–ø–ª–µ–∫—Ç—ã',
          callback_data: 'productsType_–ö–æ–º–ø–ª–µ–∫—Ç—ã'
        },
        {
          text: '–£—Å–ª—É–≥–∏/—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
          callback_data: 'productsType_–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂'
        }
      ]
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: productsTypeKeyboard
  });
}

function showLawyersPage(bot, chatId, page) {
  const lawyers = [
    '–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è_—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞', '–æ—Ü–µ–Ω–∫–∞_–∞–≤—Ç–æ–º–æ–±–∏–ª—è', '–∞–≤—Ç–æ—é—Ä–∏—Å—Ç', '–æ—Å–∞–≥–æ', '–∞–≤–∞–π—Ä–∏–Ω—ã–µ_–∫–æ–º–∏—Å—Å–∞—Ä—ã'
  ];

  const ITEMS_PER_PAGE = 10;
  const start = page * ITEMS_PER_PAGE;
  const end = start + ITEMS_PER_PAGE;
  const currentLawyers = lawyers.slice(start, end);

  const keyboardRows = [];
  while (currentLawyers.length) {
    keyboardRows.push(currentLawyers.splice(0, 2));
  }

  const paginationButtons = [];
  if (page > 0) {
    paginationButtons.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `lawyer_page_${page - 1}`
    });
  }
  if (end < lawyers.length) {
    paginationButtons.push({
      text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è',
      callback_data: `lawyer_page_${page + 1}`
    });
  }

  const keyboard = {
    inline_keyboard: [
      ...keyboardRows.map(row => row.map(lawyer => ({
        text: lawyer.replace(/_/g, ' '),
        callback_data: `lawyer_${lawyer}`
      }))),
      paginationButtons,
      [{
        text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: 'main_menu'
      }]
    ]
  };

  bot.sendMessage(chatId, `‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —é—Ä. —É—Å–ª—É–≥—É (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}):`, {
    reply_markup: keyboard
  });
}

module.exports = {
  showCategoryKeyboard,
  showServiceRegionKeyboard,
  showLawyersPage,
  showSellType,
  showProductsType,
  showPartsFresh,
  showBrandsPage
};