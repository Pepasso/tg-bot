// utils/menus.js

const {
  allowedTables,
  CARS_PER_PAGE,
  allowedServices,
  SERVICES_PER_PAGE,
  allowedLawyers,
  LAWYERS_PER_PAGE
} = require('../core/constants');
const {
  buildPaginationButtons
} = require('./pagination');


function showCategoryKeyboard(bot, chatId) {
  const categoryKeyboard = {
    inline_keyboard: [
      [{
        text: '–î–ª—è –º–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏',
        callback_data: 'category_1'
      }, {
        text: '–î–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ',
        callback_data: 'category_0'
      }],
      [{
        text: '–ì—Ä—É–∑–æ–≤–æ–π –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        callback_data: 'category_3'
      }, {
        text: '–î–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏',
        callback_data: 'category_4'
      }]
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: categoryKeyboard
  });
}

function showPartsFresh(bot, chatId) {
  const keyboard = {
    inline_keyboard: [
      [{
        text: "–ù–æ–≤—ã–µ",
        callback_data: "fresh_1"
      }, {
        text: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ",
        callback_data: "fresh_2"
      }],
      [{
        text: "–ë/–£",
        callback_data: "fresh_3",

      }, {
        text: "–ê–≤—Ç–æ—Ä–∞–∑–±–æ—Ä",
        callback_data: "fresh_4"
      }]
    ]
  };

  bot.sendMessage(chatId, '‚ôªÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:', {
    reply_markup: keyboard
  });
}

function showBrandsPage(bot, chatId, page = 0) {
  const totalPages = Math.ceil(allowedTables.length / CARS_PER_PAGE);
  const brands = allowedTables.slice(page * CARS_PER_PAGE, (page + 1) * CARS_PER_PAGE);

  const inline_keyboard = [];
  while (brands.length) {
    inline_keyboard.push(brands.splice(0, 3).map(brand => ({
      text: brand,
      callback_data: `brand_${brand}`
    })));
  }


  const pagination = buildPaginationButtons('brand', page, allowedTables.length, 'page', CARS_PER_PAGE);
  if (pagination.length) inline_keyboard.push(pagination);
  inline_keyboard.push([{
    text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    callback_data: 'main_menu'
  }]);

  bot.sendMessage(chatId, `üöó –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
    reply_markup: {
      inline_keyboard
    }
  });
}

function showServicesPage(bot, chatId, page = 0) {
  const totalPages = Math.ceil(allowedServices.length / SERVICES_PER_PAGE);
  const services = allowedServices.slice(page * SERVICES_PER_PAGE, (page + 1) * SERVICES_PER_PAGE);

  const inline_keyboard = [];
  while (services.length) {
    inline_keyboard.push(services.splice(0, 2).map(service => ({
      text: service.replace(/_/g, ' '),
      callback_data: `service_${service}`
    })));
  }


  const pagination = buildPaginationButtons('service', page, allowedServices.length, 'servicepage', SERVICES_PER_PAGE);
  if (pagination.length) inline_keyboard.push(pagination);
  inline_keyboard.push([{
    text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    callback_data: 'main_menu'
  }]);

  bot.sendMessage(chatId, `üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
    reply_markup: {
      inline_keyboard
    }
  });
}

function showLawyersPage(bot, chatId, page = 0) {
  const totalPages = Math.ceil(allowedLawyers.length / LAWYERS_PER_PAGE);
  const lawyers = allowedLawyers.slice(page * LAWYERS_PER_PAGE, (page + 1) * LAWYERS_PER_PAGE);

  const inline_keyboard = [];
  while (lawyers.length) {
    inline_keyboard.push(lawyers.splice(0, 2).map(lawyer => ({
      text: lawyer.replace(/_/g, ' '),
      callback_data: `lawyer_${lawyer}`
    })));
  }


  const pagination = buildPaginationButtons('lawyer', page, allowedLawyers.length, 'lawyerpage', LAWYERS_PER_PAGE);
  if (pagination.length) inline_keyboard.push(pagination);
  inline_keyboard.push([{
    text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    callback_data: 'main_menu'
  }]);

  bot.sendMessage(chatId, `‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —é—Ä. —É—Å–ª—É–≥—É (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}):`, {
    reply_markup: {
      inline_keyboard
    }
  });
}

function showServiceRegionKeyboard(bot, chatId) {
  const serviceRegionKeyboard = {
    inline_keyboard: [
      [{
        text: '–¶–µ–Ω—Ç—Ä',
        callback_data: 'serviceregion_1'
      }, {
        text: '–ò–ª—å–∏–Ω–∫–∞',
        callback_data: 'serviceregion_2'
      }],
      [{
        text: '–ó–∞–ø—Å–∏–±',
        callback_data: 'serviceregion_3'
      }, {
        text: '–ö—É–π–±—ã—à–µ–≤–æ',
        callback_data: 'serviceregion_4'
      }],
      [{
        text: '–ö—É–∑–Ω–µ—Ü–∫',
        callback_data: 'serviceregion_5'
      }]
    ]
  };

  bot.sendMessage(chatId, 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–∏—Å–∞:', {
    reply_markup: serviceRegionKeyboard
  });
}

function showSellType(bot, chatId) {
  const sellTypeKeyboard = {
    inline_keyboard: [
      [{
        text: '–õ–µ–≥–∫–æ–≤—ã–µ',
        callback_data: 'sell_type_–õ–µ–≥–∫–æ–≤—ã–µ'
      }, {
        text: '–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
        callback_data: 'sell_type_–ì—Ä—É–∑–æ–≤—ã–µ/—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞'
      }]
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¢–°:', {
    reply_markup: sellTypeKeyboard
  });
}

function showHowSell(bot, chatId) {
  const sellHowKeyboard = {
    inline_keyboard: [
      [{
        text: "–ü—Ä–æ–¥–∞—Ç—å (–≤—ã–∫—É–ø)",
        callback_data: "sell_how_–ü—Ä–æ–¥–∞—Ç—å(–≤—ã–∫—É–ø)"
      }, {
        text: "–ê–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥",
        callback_data: "sell_how_–ê–≤—Ç–æ–ª–∞–º–±–∞—Ä–¥"
      }, {
        text: "–ö—É–ø–∏—Ç—å",
        callback_data: "sell_how_–ö—É–ø–∏—Ç—å"
      }],
    ]
  };

  bot.sendMessage(chatId, "üöò –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏:", {
    reply_markup: sellHowKeyboard
  });
}

function showProductsType(bot, chatId) {
  const productsTypeKeyboard = {
    inline_keyboard: [
      [{
        text: '–ê–∫—Å–µ—Å—Å—É—Ä—ã',
        callback_data: 'products_type_–ê–∫—Å–µ—Å—Å—É—Ä—ã'
      }, {
        text: '–®–∏–Ω—ã',
        callback_data: 'products_type_–®–∏–Ω—ã'
      }, {
        text: '–î–∏—Å–∫–∏',
        callback_data: 'products_type_–î–∏—Å–∫–∏'
      }, {
        text: '–ö–æ–º–ø–ª–µ–∫—Ç—ã',
        callback_data: 'products_type_–ö–æ–º–ø–ª–µ–∫—Ç—ã'
      }, {
        text: '–£—Å–ª—É–≥–∏/—à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂',
        callback_data: 'products_type_–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂'
      }],
    ]
  };

  bot.sendMessage(chatId, 'üöò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: productsTypeKeyboard
  });
}

module.exports = {
  showCategoryKeyboard,
  showServiceRegionKeyboard,
  showLawyersPage,
  showSellType,
  showProductsType,
  showPartsFresh,
  showBrandsPage,
  showServicesPage,
  showHowSell
};